{"components":{"hyperfiles.near/widget/adapter\\github":{"code":"// Function to construct a GitHub API URL given a file path in a repository\nconst githubUrl = (filePath) =>\n  `https://api.github.com/repos/your-username/your-repository/contents/${filePath}`;\n\n// Function to retrieve data from GitHub given a file path\nfunction get(filePath) {\n  return fetch(githubUrl(filePath), {\n    headers: {\n      Accept: \"application/vnd.github.v3.raw\", // Set Accept header to get raw content of the file\n      Authorization: \"token YOUR_GITHUB_TOKEN\", // Authorization header with your GitHub token\n    },\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Failed to fetch data\");\n    }\n    return response.text(); // Use .text() for raw content, not .json()\n  });\n}\n\n// Function to create and upload data to GitHub, returning a promise with the URL of the uploaded content\nfunction create(filePath, data) {\n  // Added filePath to the parameters\n  return new Promise((resolve, reject) => {\n    if (data.length) {\n      const content = btoa(data); // Convert data to Base64 for GitHub API\n      fetch(githubUrl(filePath), {\n        method: \"PUT\",\n        headers: {\n          Accept: \"application/vnd.github.v3+json\", // Set Accept header to expect JSON responses\n          Authorization: \"token YOUR_GITHUB_TOKEN\", // Authorization header with your GitHub token\n          \"Content-Type\": \"application/json\", // Set the Content-Type header\n        },\n        body: JSON.stringify({\n          message: `Upload ${filePath}`, // Commit message\n          content: content, // Base64 encoded content\n        }),\n      })\n        .then((response) => response.json()) // Parse the JSON response\n        .then((data) => {\n          if (data.content && data.content.html_url) {\n            resolve({ url: data.content.html_url }); // Resolve the promise with the HTML URL of the new content\n          } else {\n            throw new Error(\"Invalid response from GitHub\");\n          }\n        })\n        .catch((error) => {\n          console.error(\"Error in create function:\", error);\n          reject(error); // Reject the promise in case of an error\n        });\n    } else {\n      reject(\"No data provided\"); // Reject the promise if no data is provided\n    }\n  });\n}\n\n// Return the get and create functions for use elsewhere\nreturn { get, create };\n"},"hyperfiles.near/widget/adapter\\ipfs":{"code":"const ipfsUrl = (cid) => `https://ipfs.near.social/ipfs/${cid}`;\n\nfunction get(ref) {\n  const data = fetch(`https://ipfs.near.social/ipfs/${ref.cid}`);\n  return data.body;\n}\n\nfunction create(data) {\n  return new Promise((resolve, reject) => {\n    if (data.length) {\n      const body = new Blob([data], { type: \"application/json\" });\n      console.log(body);\n\n      asyncFetch(\"https://ipfs.near.social/add\", {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n        },\n        body,\n      })\n        .then((res) => {\n          resolve({ cid: res.body.cid }); // Resolve the promise with the necessary data\n        })\n        .catch((error) => {\n          console.error(\"Error in create function:\", error);\n          reject(error); // Reject the promise in case of an error\n        });\n    } else {\n      reject(\"No data provided\"); // Reject the promise if no data is provided\n    }\n  });\n}\n\nreturn { get, create };\n"},"hyperfiles.near/widget/app":{"code":"const Card3D = styled.div`\n  perspective: 1500px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  height: 100%;\n`;\n\nconst CardContent = styled.div`\n  background-color: #fff;\n  color: #000;\n  padding: 2rem;\n`;\n\nconst Button = styled.button``;\n\nconst [showCover, setShowCover] = useState(false);\n\nreturn (\n  <div className=\"vh-100 w-100 bg-gray-100\">\n    {showCover && (\n      <Card3D>\n        <CardContent>\n          <h1\n            className=\"display-4 font-weight-bold text-black mb-2\"\n            style={{\n              textShadow:\n                \"1px 1px 1px rgba(0, 0, 0, 0.5), 4px 4px 4px rgba(0, 0, 0, 0.3)\",\n            }}\n          >\n            hyperfiles\n          </h1>\n          <p\n            className=\"h5 text-success mb-4\"\n            style={{\n              textShadow:\n                \"1px 1px 1px rgba(0, 0, 0, 0.5), 2px 2px 2px rgba(0, 0, 0, 0.3)\",\n            }}\n          >\n            organize everything\n          </p>\n        </CardContent>\n        <Button onClick={() => setShowCover(false)}>go</Button>\n      </Card3D>\n    )}\n    <div style={{ display: showCover ? \"none\" : \"block\" }} className=\"mt-4\">\n      <Widget\n        src=\"hyperfiles.near/widget/hyperfile.index\"\n        props={{ creatorId: context.accountId }}\n      />\n    </div>\n  </div>\n);\n"},"hyperfiles.near/widget/hyperfile\\create":{"code":"const Wrapper = styled.div`\n  max-width: 400px;\n  margin: 0 auto;\n`;\n\nconst TabContent = styled.div`\n  margin-top: 1rem;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n`;\n\nconst Input = styled.input`\n  padding: 5px;\n`;\n\nconst Select = styled.select`\n  padding: 8px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst adapters = [\n  // these can come from the user (or app) settings\n  // {\n  //   title: \"Local Storage\",\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\n  //   saveRef: false\n  // },\n  // {\n  //   title: \"SocialDB\",\n  //   value: \"everycanvas.near/widget/adapter.social\",\n  // },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n  },\n  // {\n  //   title: \"GitHub\",\n  //   value: \"hack.near/widget/adapter.github\",\n  // },\n  // {\n  //   title: \"Obsidian\",\n  //   value: \"hack.near/widget/adapter.obsidian\",\n  // },\n  // {\n  //   title: \"Tldraw\",\n  //   value: \"hack.near/widget/adapter.tldraw\",\n  // },\n];\n\nconst defaultAdapter = adapters[0];\n\nconst { creatorId } = props;\n\nconst [json, setJson] = useState(props.data ?? \"\");\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(defaultAdapter.value ?? \"\");\nconst [reference, setReference] = useState(undefined);\nconst [filename, setFilename] = useState(props.filename ?? \"\");\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\n\nfunction generateUID() {\n  return (\n    Math.random().toString(16).slice(2) +\n    Date.now().toString(36) +\n    Math.random().toString(16).slice(2)\n  );\n}\n\nconst handleCreate = () => {\n  const isCreator = context.accountId === creatorId;\n\n  // load in the state.adapter (modules for IPFS, Arweave, Ceramic, Verida, On Machina... )\n  const { create } = VM.require(adapter) || (() => {});\n  if (create) {\n    // store the data somewhere, based on the adapter\n    create(json).then((reference) => {\n      // now we have a reference to the data\n      // we need to name it... are we the original creator or are we forking? We don't want to overwrite any of the users custom (or maybe we do!)\n      const thingId = filename ?? generateUID();\n\n      const hyperfile = {\n        [props.type]: {\n          // which we store in the social contract\n          [thingId]: {\n            \"\": JSON.stringify({\n              fileformat: `${props.type}.${source}`,\n              source: source,\n              adapter: adapter,\n              reference: reference,\n            }),\n            metadata: {\n              name: name,\n              description: description,\n              type: props.type,\n            },\n          },\n        },\n      };\n\n      if (creatorId !== context.accountId) {\n        // handle request merge\n        hyperfile.index = {\n          notify: JSON.stringify({\n            key: creatorId,\n            value: {\n              type: \"request\",\n              data: {\n                type: \"merge\",\n                upstream: `${creatorId}/${props.type}/${props.filename}`,\n                origin: `${context.accountId}/${props.type}/${thingId}`,\n              },\n            },\n          }),\n        };\n        hyperfile[props.type][thingId].metadata = {\n          ...hyperfile[props.type][thingId].metadata,\n          upstream: `${creatorId}/${props.type}/${props.filename}`,\n        };\n        // I want to make a request to merge\n        // set upstream and downstream\n      }\n\n      // sometimes we're not logged in, so it doesn't do anything!\n      Social.set(hyperfile, { force: true });\n    });\n  }\n};\n\nreturn (\n  <Wrapper>\n    <h3>{context.accountId === creatorId ? \"create\" : \"request merge\"}</h3>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Data\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n\n    <TabContent>\n      {activeTab === \"data\" && (\n        <Form>\n          <FormGroup>\n            <Label>source</Label>\n            <Input\n              type=\"text\"\n              value={source}\n              onChange={(e) => onChangeSource(e.target.value)}\n              disabled={props.source} // disable if source is passed in\n            />\n          </FormGroup>\n          {/* <Widget\n            src=\"bozon.near/widget/CodeDiff\"\n            props={{ currentCode: update, prevCode: src, ...props }}\n          /> */}\n          <textarea\n            className=\"form-control mb-3\"\n            rows={5}\n            value={json}\n            onChange={(e) => setJson(e.target.value)}\n          />\n          <FormGroup>\n            <Label>adapter</Label>\n            <Select\n              value={adapter}\n              onChange={(e) => setAdapter(e.target.value)}\n            >\n              {adapters.map((o) => (\n                <option value={o.value}>{o.title}</option>\n              ))}\n            </Select>\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <TabContent>\n      {activeTab === \"metadata\" && (\n        <Form>\n          <FormGroup>\n            <Label>name</Label>\n            <Input\n              type=\"text\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </FormGroup>\n          <FormGroup>\n            <Label>description</Label>\n            <textarea\n              className=\"form-control mb-3\"\n              rows={5}\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            />\n          </FormGroup>\n        </Form>\n      )}\n    </TabContent>\n    <FormGroup>\n      <button className=\"btn btn-success mb-1\" onClick={handleCreate}>\n        Create\n      </button>\n    </FormGroup>\n  </Wrapper>\n);\n"},"hyperfiles.near/widget/hyperfile\\index":{"code":"const TabContent = styled.div`\n  margin-top: 1rem;\n`;\n\nconst Form = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n  width: 100%;\n`;\n\nconst Label = styled.label`\n  font-weight: bold;\n`;\n\nconst Input = styled.input`\n  padding: 5px;\n`;\n\nconst Select = styled.select`\n  padding: 8px;\n`;\n\nconst FormGroup = styled.div`\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Button = styled.button``;\n\nconst adapters = [\n  // these can come from the user (or app) settings\n  // {\n  //   title: \"Local Storage\",\n  //   value: \"everycanvas.near/widget/adapter.local_storage\",\n  //   saveRef: false\n  // },\n  // {\n  //   title: \"SocialDB\",\n  //   value: \"everycanvas.near/widget/adapter.social\",\n  // },\n  {\n    title: \"\",\n    value: \"\",\n  },\n  {\n    title: \"IPFS\",\n    value: \"everycanvas.near/widget/adapter.ipfs\",\n    refType: { cid: \"string\" },\n  },\n  // {\n  //   title: \"Custom\",\n  //   value: \"custom\",\n  // },\n  {\n    title: \"GitHub\",\n    value: \"flowscience.near/widget/adapter.github\",\n  },\n  // {\n  //   title: \"Obsidian\",\n  //   value: \"hack.near/widget/adapter.obsidian\",\n  // },\n  // {\n  //   title: \"Tldraw\",\n  //   value: \"hack.near/widget/adapter.tldraw\",\n  // },\n];\n\n//const { GitHubAPIExample } = VM.require(  \"create.near/widget/GitHub.API.Example\");\n\nconst [rawData, setRawData] = useState(\"\");\nconst [source, setSource] = useState(props.source ?? \"\");\nconst [adapter, setAdapter] = useState(\"\");\nconst [reference, setReference] = useState(undefined);\nconst [activeTab, setActiveTab] = useState(\"data\");\nconst [name, setName] = useState(props.name ?? \"\");\nconst [description, setDescription] = useState(props.description ?? \"\");\nconst [hyperfile, setHyperfile] = useState(\"\");\nconst [type, setType] = useState(\"\");\nconst [selectedRepo, setSelectedRepo] = useState(null);\n\nconst handleRepoSelect = (repo) => {\n  setSelectedRepo(repo);\n  console.log(\"Selected repository:\", repo);\n  // Now `selectedRepo` can be used in your get and create functions\n};\n\nconst rawAdapter =\n  (adapter !== \"\" || adapter !== \"custom\") && Social.get(adapter, \"final\");\nconst { create } =\n  ((adapter !== \"\" || adapter !== \"custom\") && VM.require(adapter)) ||\n  (() => {});\n\nconst functionRegex = /function\\s+(\\w+)\\s*\\(([^)]*)\\)\\s*{([\\s\\S]*?)\\n}/g;\n\nfunction parseAdapter(code) {\n  let match;\n  const functions = [];\n\n  while ((match = functionRegex.exec(code)) !== null) {\n    const [_, functionName, params, content] = match;\n    functions.push({ functionName, params, content });\n  }\n\n  return functions.map((func, index) => (\n    <FormGroup key={index}>\n      <Label>{func.functionName}</Label>\n      <textarea\n        className=\"form-control\"\n        style={{ width: \"100%\", height: \"100%\" }}\n        value={func.content.trim()}\n        disabled\n      />\n    </FormGroup>\n  ));\n}\n\nfunction generateUID() {\n  const maxHex = 0xffffffff;\n  const randomNumber = Math.floor(Math.random() * maxHex);\n  return randomNumber.toString(16).padStart(8, \"0\");\n}\n\nconst handleCreate = () => {\n  if (create) {\n    console.log(\"it's something\", rawData);\n    // store the data somewhere, based on the adapter\n    create(rawData).then((reference) => {\n      // now we have a reference to the data\n      const thingId = generateUID();\n\n      const hyperfile = {\n        thing: {\n          // which we store in the social contract\n          [thingId]: {\n            \"\": JSON.stringify({\n              source: source,\n              adapter: adapter,\n              reference: reference,\n            }),\n            metadata: {\n              name: name,\n              description: description,\n              type: type,\n            },\n          },\n        },\n      };\n\n      setHyperfile(JSON.stringify(hyperfile, null, 2));\n    });\n  } else {\n    console.log(\"invalid adapter\");\n  }\n};\n\nreturn (\n  <div className=\"container mt-3\">\n    <div className=\"row p-3\">\n      <h1>hyperfile creator</h1>\n    </div>\n    <ul className=\"nav nav-tabs\">\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"data\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"data\")}\n        >\n          Data\n        </a>\n      </li>\n      <li className=\"nav-item\">\n        <a\n          className={`nav-link ${activeTab === \"metadata\" ? \"active\" : \"\"}`}\n          onClick={() => setActiveTab(\"metadata\")}\n        >\n          Metadata\n        </a>\n      </li>\n    </ul>\n    <div className=\"row\">\n      <TabContent>\n        {activeTab === \"data\" && (\n          <div className=\"row\">\n            <div className=\"col\">\n              <div className=\"p-3 border bg-light\">\n                <Form>\n                  <h3>provide the data</h3>\n                  <FormGroup>\n                    <Label>source</Label>\n                    <Input\n                      type=\"text\"\n                      value={source}\n                      onChange={(e) => setSource(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>type</Label>\n                    <Input\n                      type=\"text\"\n                      value={type}\n                      onChange={(e) => setType(e.target.value)}\n                    />\n                  </FormGroup>\n                  <FormGroup>\n                    <Label>raw data</Label>\n                    <textarea\n                      className=\"form-control\"\n                      style={{ width: \"100%\", height: \"400px\" }}\n                      value={rawData}\n                      onChange={(e) => setRawData(e.target.value)}\n                    />\n                  </FormGroup>\n                </Form>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"p-3 border bg-light\">\n                <Form>\n                  <h3>how to store it</h3>\n                  <FormGroup>\n                    <Label>adapter</Label>\n                    <Select\n                      value={adapter}\n                      onChange={(e) => setAdapter(e.target.value)}\n                    >\n                      {adapters.map((o) => (\n                        <option value={o.value}>{o.title}</option>\n                      ))}\n                    </Select>\n                  </FormGroup>\n                  {rawAdapter && <>{parseAdapter(rawAdapter)}</>}\n                  {adapter === \"flowscience.near/widget/adapter.github\" && (\n                    <Widget\n                      src=\"flowscience.near/widget/GitHubSearchSelect\"\n                      onClick={handleRepoSelect}\n                    ></Widget>\n                  )}\n                </Form>\n              </div>\n            </div>\n            <div className=\"col\">\n              <div className=\"p-3 border bg-light\">\n                <Form>\n                  <Button\n                    onClick={handleCreate}\n                    disabled={!adapter || !type || !source || !rawData}\n                  >\n                    create reference\n                  </Button>\n                  {hyperfile !== \"\" && (\n                    <>\n                      <FormGroup>\n                        <textarea\n                          className=\"form-control\"\n                          value={hyperfile}\n                          disabled\n                          style={{ width: \"100%\", height: \"400px\" }}\n                        />\n                      </FormGroup>\n                      <Button\n                        onClick={() =>\n                          Social.set(JSON.parse(hyperfile), { force: true })\n                        }\n                      >\n                        save\n                      </Button>\n                    </>\n                  )}\n                </Form>\n              </div>\n            </div>\n          </div>\n        )}\n      </TabContent>\n      <TabContent>\n        {activeTab === \"metadata\" && (\n          <Form>\n            <h3>metadata</h3>\n            <FormGroup>\n              <Label>name</Label>\n              <Input\n                type=\"text\"\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label>description</Label>\n              <textarea\n                className=\"form-control mb-3\"\n                rows={5}\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n              />\n            </FormGroup>\n          </Form>\n        )}\n      </TabContent>\n    </div>\n  </div>\n);\n"},"hyperfiles.near/widget/hyperfile\\view":{"code":"const { path } = props;\n\nif (!path) {\n  return <p>No path provided.</p>;\n}\n\nconst thing = Social.get(`${path}/**`, \"final\");\n\nif (!thing) {\n  return <p>Loading...</p>;\n}\n\nconst hyperfile = JSON.parse(thing[\"\"]);\n\nconst { get } = VM.require(hyperfile.adapter || (() => {}));\n\nif (get) {\n  const content = get(hyperfile.reference);\n\n  if (content === null) return <p>no content</p>;\n\n  return (\n    <div className=\"container\">\n      {thing.metadata.type === \"md\" ? (\n        <Widget\n          src=\"openwebbuild.near/widget/Post.Markdown\"\n          props={{\n            text: content,\n          }}\n        />\n      ) : (\n        <p>viewer does not currently support type: {thing.type}</p>\n      )}\n    </div>\n  );\n} else {\n  return <p>Invalid adapter: {hyperfile.adapter}</p>;\n}\n"}},"data":{}}
